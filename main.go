// Package framework provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package framework

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// GetDivelogsParams defines parameters for GetDivelogs.
type GetDivelogsParams struct {
	// The numbers of items to return
	Limit *int `json:"limit,omitempty"`

	// A unique identifier for a specific record
	Cursor *string `json:"cursor,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/v1/admin/health)
	GetAdminHealth(ctx echo.Context) error

	// (GET /api/v1/admin/tokens)
	GetAdminTokens(ctx echo.Context) error

	// (GET /api/v1/divelog/{divelogId})
	GetDivelog(ctx echo.Context, divelogId string) error

	// (GET /api/v1/divelogs)
	GetDivelogs(ctx echo.Context, params GetDivelogsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAdminHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetAdminHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAdminHealth(ctx)
	return err
}

// GetAdminTokens converts echo context to params.
func (w *ServerInterfaceWrapper) GetAdminTokens(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAdminTokens(ctx)
	return err
}

// GetDivelog converts echo context to params.
func (w *ServerInterfaceWrapper) GetDivelog(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "divelogId" -------------
	var divelogId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "divelogId", runtime.ParamLocationPath, ctx.Param("divelogId"), &divelogId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter divelogId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDivelog(ctx, divelogId)
	return err
}

// GetDivelogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDivelogs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDivelogsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDivelogs(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/admin/health", wrapper.GetAdminHealth)
	router.GET(baseURL+"/api/v1/admin/tokens", wrapper.GetAdminTokens)
	router.GET(baseURL+"/api/v1/divelog/:divelogId", wrapper.GetDivelog)
	router.GET(baseURL+"/api/v1/divelogs", wrapper.GetDivelogs)

}
